#!/usr/bin/env python
"""
Really silly schema migration framework, built for SQLAlchemy.

Example:
        %prog "mysql://foo:bar@localhost/baz" "sqlite:///:memory:" \\
                   --metadata model.meta:metadata --verbose
"""
import sqlalchemy
import sys
import time

from sqlalchemygrate import migrations

import logging
log = logging.getLogger(__name__)

from optparse import OptionParser


def import_module(path):
    # FIXME: There's a builtin for this in Python 2.7
    module, obj = path.split(':', 1)
    o = __import__(module, fromlist=[obj])
    return getattr(o, obj)


def main():
    usage="%prog ENGINE_FROM ENGINE_TO\n" + __doc__

    # FIXME: Use argparse someday
    parser = OptionParser(usage)
    parser.add_option("--metadata", dest="metadata", help="MetaData object to use which contains the target model definition. Example: model.metadata:MetaData")
    parser.add_option("--convert", dest="convert", help="(Optional) Convert function to run data through. Example: migration.v1:convert")
    parser.add_option("--only-tables", dest="only_tables", help="Only perform migration on the given tables (comma-separated).")
    parser.add_option("--skip-tables", dest="skip_tables", help="Skip migration on the given tables (comma-separated).")
    parser.add_option("--limit", dest="limit", default=100000, help="Limit of rows to select per insert loop.")
    parser.add_option("--verbose", "-v", dest="verbose", action="count", help="Enable verbose output. Use twice to enable debug output.")
    parser.add_option("--show-sql", dest="show_sql", action="store_true", default=False, help="Echo SQLAlchemy queries.")

    options, args = parser.parse_args()

    if len(args) < 2:
        parser.error("Need to specify two engines.")

    if options.verbose > 1:
        log.setLevel(logging.DEBUG)
    elif options.verbose > 0:
        log.setLevel(logging.INFO)

    only_tables = None
    if options.only_tables:
        only_tables = [t.strip() for t in options.only_tables.split(',')]

    skip_tables = None
    if options.skip_tables:
        skip_tables = [t.strip() for t in options.skip_tables.split(',')]

    metadata = import_module(options.metadata)

    convert = None
    if options.convert:
        convert = import_module(options.convert)

    e1 = sqlalchemy.create_engine(args[0])
    e2 = sqlalchemy.create_engine(args[1], echo=options.show_sql)

    now = time.time()
    migrations.migrate(e1, e2, metadata=metadata, convert_fn=convert, only_tables=only_tables, skip_tables=skip_tables, limit=options.limit)
    log.info("Done in {0:.2f}s".format(time.time()-now))


if __name__ == '__main__':
    log_handler = logging.StreamHandler()
    log_handler.setFormatter(logging.Formatter('%(levelname)-8s %(message)s'))
    log.addHandler(log_handler)

    n = main()
    if n:
        sys.exit(n)
